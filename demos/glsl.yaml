styles:
    space-constant:
        shaders:
            blocks:
                global: |
                    // Get the constant coordinates (glitches on zooms)
                    // ================================
                    vec2 getConstantCoords () {
                        #ifdef TANGRAM_FRAGMENT_SHADER
                        const float pixel_scale = 695.;
                        float meter_pixels = u_meters_per_pixel / u_device_pixel_ratio;
                        vec2 st = gl_FragCoord.xy/pixel_scale;
                        const float dot_wrap = 1000.;
                        st += mod(u_map_position.xy / meter_pixels, dot_wrap)/pixel_scale;
                        return st;
                        #else
                        return vec2(0.0,0.0);
                        #endif
                    }
    functions-aastep:
        shaders:
            extensions: OES_standard_derivatives
            blocks:
                global: |
                    // AntiAliased Step function
                    //=============================
                    float aastep(float threshold, float value) {
                        #ifdef TANGRAM_FRAGMENT_SHADER
                            #ifdef TANGRAM_EXTENSION_OES_standard_derivatives
                                float afwidth = length(vec2(dFdx(value), dFdy(value))) * 0.70710678118654757;
                                return smoothstep(threshold-afwidth, threshold+afwidth, value);
                            #else
                                return step(threshold, value);
                            #endif
                        #else
                            return step(threshold, value);
                        #endif
                    }
    patterns-stripes:
        mix: [functions-aastep,space-constant]
        shaders:
            defines:
                PI: 3.14159265358979323846
            blocks:
                global: |
                    // Return a distance function of stripes
                    float stripesDF (vec2 st, float y) {
                        if (y > 0.)
                            return abs(sin(st.y*PI));
                        else
                            return abs(sin(st.x*PI));
                    }
                    // Adjustable width stripes
                    float stripes (float angle,float interval,float width) {
                        vec2 st = getConstantCoords();
                        const float wave_width = 30.0;
                        const float wave_height = .01;
                        if (abs(angle) > 0.4)
                        {
                            st.y += (st.x*wave_width)*wave_height*tan(angle*PI);
                            return aastep(width, stripesDF(st*interval, 1.));
                        }
                        else
                        {
                            st.x += (st.y*wave_width)*wave_height*tan(angle*PI);
                            return aastep(width, stripesDF(st*interval, 0.));
                        }
                    }
                    // Faster optimisation of diagonal stripes
                    float diagonalStripes (vec2 st) {
                        vec2 i_st = floor(st);
                        vec2 f_st = fract(st);
                        if (mod(i_st.y,2.) - mod(i_st.x,2.) == 0.) {
                            return 1.0 - aastep(f_st.x,f_st.y);
                        } else {
                            return aastep(f_st.x,f_st.y);
                        }
                    }